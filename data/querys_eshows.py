from data.dbconnect import get_dataframe_from_query
import streamlit as st

#Media de candidatos por oportunidade Mensal
@st.cache_data
def avarege_candidates_by_opportunity_month():
    return get_dataframe_from_query("""
SELECT 
	DATE_FORMAT(O.DATA_INICIO, '%m/%Y') AS 'Data',
	COUNT(C.ID) AS 'Total de Candidaturas',
	COUNT(DISTINCT O.ID) AS 'Total de Oportunidades',
	ROUND(COUNT(C.ID) / COUNT(DISTINCT O.ID), 2) AS 'Media por Vaga'
FROM T_OPORTUNIDADES O
LEFT JOIN T_CANDIDATOS C ON C.FK_OPORTUNIDADE = O.ID
	WHERE O.DATA_INICIO IS NOT NULL
	AND O.DATA_INICIO >= '2024-01-01'
	AND O.DATA_INICIO < DATE_FORMAT(NOW(), '%Y-%m-01')
	AND O.FK_CONTRATANTE NOT IN ('102','196','1015','1861','1871','1982','1983','1985','2624','343')
GROUP BY DATE_FORMAT(O.DATA_INICIO, '%m/%Y')
ORDER BY YEAR(O.DATA_INICIO), MONTH(O.DATA_INICIO)
""")

#Media de candidatos por oportunidade Semanal
@st.cache_data
def avarege_candidates_by_opportunity_week():
    return get_dataframe_from_query("""
SELECT 
	CONCAT(
    LPAD(WEEK(O.DATA_INICIO, 1) - WEEK(DATE_SUB(O.DATA_INICIO, INTERVAL DAY(O.DATA_INICIO) - 1 DAY), 1) + 1, 2, '0'),'/', LPAD(MONTH(O.DATA_INICIO), 2, '0'), '/', YEAR(O.DATA_INICIO)) AS 'Semana/Mês/Ano',
	COUNT(C.ID) AS 'Total de Candidaturas',
	COUNT(DISTINCT O.ID) AS 'Total de Oportunidades',
	ROUND(COUNT(C.ID) / COUNT(DISTINCT O.ID), 2) AS 'Media por Vaga'
FROM T_OPORTUNIDADES O
LEFT JOIN T_CANDIDATOS C ON C.FK_OPORTUNIDADE = O.ID
	WHERE O.DATA_INICIO IS NOT NULL
	AND O.DATA_INICIO >= '2025-01-01'
	AND O.DATA_INICIO < DATE_FORMAT(NOW(), '%Y-%m-01')    
	AND O.FK_CONTRATANTE NOT IN ('102','196','1015','1861','1871','1982','1983','1985','2624')
GROUP BY 
  YEAR(O.DATA_INICIO),
  MONTH(O.DATA_INICIO),
  WEEK(O.DATA_INICIO, 1) - WEEK(DATE_SUB(O.DATA_INICIO, INTERVAL DAY(O.DATA_INICIO) - 1 DAY), 1) + 1

ORDER BY 
  YEAR(O.DATA_INICIO),
  MONTH(O.DATA_INICIO),
  WEEK(O.DATA_INICIO, 1) - WEEK(DATE_SUB(O.DATA_INICIO, INTERVAL DAY(O.DATA_INICIO) - 1 DAY), 1) + 1;;
""")

@st.cache_data
def avarege_candidates_by_artist(day, day2):
    return get_dataframe_from_query(f"""
#Media de candidaturas por artista
SELECT 
	A.ID AS 'ID ARTISTA',
	A.NOME AS 'ARTISTA',

	(SELECT COUNT(*) FROM T_OPORTUNIDADES O
		WHERE O.DATA_INICIO BETWEEN '{day}' AND '{day2}'
		AND O.FK_CONTRATANTE NOT IN ('102','196','1015','1861','1871','1982','1983','1985','2624')
	) AS 'Oportunidades Ultimos 3 Meses',

	COUNT(DISTINCT C.ID) AS 'Candidaturas do Artista',

	ROUND(
  COUNT(DISTINCT C.ID) / NULLIF(TIMESTAMPDIFF(MONTH, '{day}', '{day2}') + 1, 0)
, 2) AS 'Média de Candidaturas por Mês',

	COUNT(CASE WHEN C.FK_STATUS_CANDIDATO = '100' THEN 1 END) AS 'Aceite Total',

	ROUND(
  COUNT(CASE WHEN C.FK_STATUS_CANDIDATO = '100' THEN 1 END) / NULLIF(TIMESTAMPDIFF(MONTH, '{day}', '{day2}') + 1, 0)
, 2) AS 'Média Aceite por Mês'

FROM T_ATRACOES A
LEFT JOIN T_CANDIDATOS C ON C.FK_ATRACAO = A.ID
LEFT JOIN T_OPORTUNIDADES O ON O.ID = C.FK_OPORTUNIDADE

WHERE O.DATA_INICIO BETWEEN '{day}' AND '{day2}'
  AND O.FK_CONTRATANTE NOT IN ('102','196','1015','1861','1871','1982','1983','1985','2624')

GROUP BY A.ID, A.NOME
HAVING COUNT(DISTINCT C.ID) > 1
ORDER BY COUNT(DISTINCT C.ID) DESC;
""")

@st.cache_data
def avarege_opportunity_created_month():
    return get_dataframe_from_query("""
SELECT DISTINCT
	DATE_FORMAT(O.DATA_INICIO, '%m/%Y') AS 'Mes/Ano',
	COUNT(DISTINCT O.ID) AS 'Oportunidades',
	ROUND(AVG(TIMESTAMPDIFF(DAY, ZO.LOG_DATE, O.DATA_INICIO)), 2) AS 'Media em DIAS',
	ROUND(AVG(TIMESTAMPDIFF(HOUR, ZO.LOG_DATE, O.DATA_INICIO)), 2) AS 'Media em Horas',
	ROUND(AVG(TIMESTAMPDIFF(MINUTE, ZO.LOG_DATE, O.DATA_INICIO)), 2) AS 'Media em Minutos'
FROM T_OPORTUNIDADES O
LEFT JOIN ZLOG_T_OPORTUNIDADES ZO ON ZO.ID = O.ID
 	WHERE ZO.DATA_INICIO >= '2024-01-01'
 	AND ZO.DATA_INICIO < DATE_FORMAT(NOW(), '%Y-%m-01') 
  AND O.DATA_INICIO >= '2024-01-01'
	AND O.DATA_INICIO < DATE_FORMAT(NOW(), '%Y-%m-01')
 	AND ZO.LOG_DATE IS NOT NULL
 	AND ZO.DATA_INICIO IS NOT NULL
	AND O.FK_CONTRATANTE NOT IN ('102','196','1015','1861','1871','1982','1983','1985','2624','343')
GROUP BY DATE_FORMAT(O.DATA_INICIO, '%m/%Y')
ORDER BY DATE_FORMAT(O.DATA_INICIO, '%m/%Y')
""")


@st.cache_data
def avarege_opportunity_created_year():
    return get_dataframe_from_query("""
SELECT DISTINCT
	YEAR(O.DATA_INICIO) AS 'Ano',
	COUNT(DISTINCT DATE_FORMAT(O.DATA_INICIO, '%Y-%m')) AS 'Meses no Ano',
	COUNT(DISTINCT O.ID) AS 'Oportunidades',
 	ROUND(AVG(TIMESTAMPDIFF(DAY, ZO.LOG_DATE, O.DATA_INICIO)), 2) AS 'Media em DIAS',
 	ROUND(AVG(TIMESTAMPDIFF(HOUR, ZO.LOG_DATE, O.DATA_INICIO)), 2) AS 'Media em Horas',  
	ROUND(AVG(TIMESTAMPDIFF(MINUTE, ZO.LOG_DATE, O.DATA_INICIO)), 2) AS 'Media em Minutos'
FROM T_OPORTUNIDADES O
LEFT JOIN ZLOG_T_OPORTUNIDADES ZO ON ZO.ID = O.ID
 	WHERE ZO.DATA_INICIO >= '2024-01-01'
 	AND ZO.DATA_INICIO <= DATE_FORMAT(NOW(), '%Y-%m-01') 
  AND O.DATA_INICIO >= '2024-01-01'
	AND O.DATA_INICIO <= DATE_FORMAT(NOW(), '%Y-%m-01')
 	AND ZO.LOG_DATE IS NOT NULL
 	AND ZO.DATA_INICIO IS NOT NULL
	AND O.FK_CONTRATANTE NOT IN ('102','196','1015','1861','1871','1982','1983','1985','2624','343')
GROUP BY YEAR(O.DATA_INICIO)
ORDER BY YEAR(O.DATA_INICIO);
""")